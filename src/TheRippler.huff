//! SPDX-License-Identifier: AGPL-3.0-only
//! Compiler: huffc 0.3.1
//! Author: jtriley.eth
//! ------------------------------------------------------------------------------------------------
//! # The Rippler
//!
//! A fast as fuck multicaller.
//!
//! This version allows fallible calls. If any call reverts, execution will continue.

/// ## Load address
#define macro CDL_ADDRESS(ptr) = takes (0) returns (1) {
    <ptr> calldataload          // [raw_address]
    0x60 shr                    // [clean_address]
}

/// ## Calldataload uint128
#define macro CDL_U128(ptr) = takes (0) returns (1) {
    <ptr> calldataload          // [raw_uint128]
    0x80 shr                    // [clean_uint128]
}

/// ## Calldataload uint32
#define macro CDL_U32(ptr) = takes (0) returns (1) {
    <ptr> calldataload          // [raw_uint32]
    0xe0 shr                    // [clean_uint32]
}

/// ## Calldataload uint16
#define macro CDL_U16(ptr) = takes (0) returns (1) {
    <ptr> calldataload          // [raw_uint16]
    0xf0 shr                    // [clean_uint16]
}

/// ## Call
///
/// Makes a call, provided immediate pointers to calldata
///
/// ### Template Arguments
///
/// - `target_ptr`: calldata pointer to target address
/// - `value_ptr`: calldata pointer to call value
/// - `arg_ptr_ptr`: calldata pointer to payload pointer
/// - `arg_len_ptr`: calldata pointer to payload length
///
/// ### Procedures
///
/// 1. push return pointer and length
/// 2. load calldata argument pointer
/// 3. copy payload from calldata
/// 4. push memory argument pointer
/// 5. load callvalue from calldata
/// 6. load target address from calldata
/// 7. push gasleft
/// 8. make call
#define macro CALL_N(
    target_ptr,
    value_ptr,
    arg_ptr_ptr,
    arg_len_ptr
) = takes (0) returns (0) {
    push0 push0                 // [ret_ptr, ret_len]
    CDL_U32(<arg_len_ptr>)      // [arg_len, ret_ptr, ret_len]
    dup1                        // [arg_len, arg_len, ret_ptr, ret_len]
    CDL_U32(<arg_ptr_ptr>)      // [arg_ptr, arg_len, arg_len, ret_ptr, ret_len]
    push0                       // [mem_ptr, arg_ptr, arg_len, arg_len, ret_ptr, ret_len]
    calldatacopy                // [arg_len, ret_ptr, ret_len]
    push0                       // [arg_ptr, arg_len, ret_ptr, ret_len]
    CDL_U128(<value_ptr>)       // [value, arg_ptr, arg_len, ret_ptr, ret_len]
    CDL_ADDRESS(<target_ptr>)   // [target, value, arg_ptr, arg_len, ret_ptr, ret_len]
    gas                         // [gas, target, value, arg_ptr, arg_len, ret_ptr, ret_len]
    call                        // [success]
}

/// ## Entry Point
///
/// Calldata Encoding:
///
/// | offset | size (bytes) | name                |
/// | ------ | ------------ | ------------------- |
/// | 0x0000 | 2            | # of calls jumpdest |
/// | 0x0002 | 20           | target 0            |
/// | 0x0016 | 16           | value 0             |
/// | 0x0026 | 4            | payload pointer 0   |
/// | 0x002a | 4            | payload length 0    |
/// | 0x002e | 20           | target 1            |
/// | 0x0042 | 16           | value 1             |
/// | 0x0052 | 4            | payload pointer 1   |
/// | 0x0056 | 4            | payload length 1    |
/// | ...    | ...          | ...                 |
/// | 0x0296 | 20           | target 15           |
/// | 0x02aa | 16           | value 15            |
/// | 0x02ba | 4            | payload pointer 15  |
/// | 0x02be | 4            | payload length 15   |
#define macro MAIN() = takes (0) returns (0) {
    CDL_U16(push0) jump
    call_15:    CALL_N(0x296, 0x2aa, 0x2ba, 0x2be)
    call_14:    CALL_N(0x26a, 0x27e, 0x28e, 0x292)
    call_13:    CALL_N(0x23e, 0x252, 0x262, 0x266)
    call_12:    CALL_N(0x212, 0x226, 0x236, 0x23a)
    call_11:    CALL_N(0x1e6, 0x1fa, 0x20a, 0x20e)
    call_10:    CALL_N(0x1ba, 0x1ce, 0x1de, 0x1e2)
    call_9:     CALL_N(0x18e, 0x1a2, 0x1b2, 0x1b6)
    call_8:     CALL_N(0x162, 0x176, 0x186, 0x18a)
    call_7:     CALL_N(0x136, 0x14a, 0x15a, 0x15e)
    call_6:     CALL_N(0x10a, 0x11e, 0x12e, 0x132)
    call_5:     CALL_N(0xde, 0xf2, 0x102, 0x106)
    call_4:     CALL_N(0xb2, 0xc6, 0xd6, 0xda)
    call_3:     CALL_N(0x86, 0x9a, 0xaa, 0xae)
    call_2:     CALL_N(0x5a, 0x6e, 0x7e, 0x82)
    call_1:     CALL_N(0x2e, 0x42, 0x52, 0x56)
    call_0:     CALL_N(0x2, 0x16, 0x26, 0x2a)
    stop
}
